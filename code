#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less
#include <iostream>
using namespace __gnu_pbds;
using namespace std;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    ordered_set;

// here less_equal<int> is important gives functionality of multiset
// if you want set type property just remove this and add less<int>


class Solution {
public:
    vector<int> countSmaller(vector<int>& nums) {
        vector<int> ans(nums.size(),0);
        ordered_set st;
        for(int i=nums.size()-1;i>=0;i--){            
            ans[i] = st.order_of_key(nums[i]);
            st.insert(nums[i]);            
        }
        return ans;
    }
};



// approach 2

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
//Above three must de defined for ordered set to work
#define ordered_set tree<pair<int,int>, null_type, less<pair<int,int>>, rb_tree_tag, tree_order_statistics_node_update>

// using pair<int,int> in which first elememnt refers to actual value and second value must be unique

class Solution {
public:
    vector<int> countSmaller(vector<int>& nums) {
        int n = nums.size();        
        vector<int> ans(n, 0);
        ordered_set o_s;

        for(int i=n-1; i>=0; i--){
            ans[i] = o_s.order_of_key({nums[i], -1});            
            o_s.insert({nums[i], i});
        }
        return ans;
    }
};


